# 网关单独配置端口号
server.port=8000

# 可以使用toyaml.com,在线转yml格式工具,将配置文件写成yml格式

# 路由转发, 将/member/...的请求转发到member模块
spring.cloud.gateway.routes[0].id=member
# 后期用nacos,注册中心, 用应用名作路由转发
spring.cloud.gateway.routes[0].uri=http://127.0.0.1:8001
# spring.cloud.gateway.routes[0].uri=lb://member
# 转发规则, 所有member前缀的都转发到member中
spring.cloud.gateway.routes[0].predicates[0]=Path=/member/**


# 路由转发, 将/member/...的请求转发到member模块
spring.cloud.gateway.routes[1].id=business
# 后期用nacos,注册中心, 用应用名作路由转发
spring.cloud.gateway.routes[1].uri=http://127.0.0.1:8002
# spring.cloud.gateway.routes[0].uri=lb://business
# 转发规则, 所有member前缀的都转发到member中
spring.cloud.gateway.routes[1].predicates[0]=Path=/business/**

# 上边的其实是内网, 将gateway请求转到member请求
# 生产发布时, 只有gateway需要配置外网IP, 其它模块都只开放内网访问, 外网访问不了, 保证应用安全

# 允许请求来源(老版本叫allowedOrigin)
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOriginPatterns=*
# 允许携带头信息
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*
# 允许的请求方式
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=*
# 是否允许携带cookie
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowCredentials=true
# 跨域检测的有效期, 以秒为单位, 会发起一个OPTION请求
spring.cloud.gateway.globalcors.cors-configurations.[/**].maxAge=3600

